<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Todo List</title>
  <style>
    .error { color: red; font-size: 0.9em; }
    .todo-item { 
      display: flex; 
      align-items: center; 
      gap: 1rem; 
      margin: 1rem 0;
      padding: 1rem;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
   
    .todo-actions { 
      display: flex; 
      gap: 0.5rem;
      margin-left: auto;
    }
    .todo-date { color: #666; font-size: 0.9em; }
    .form-group {
      margin-bottom: 1rem;
    }
    button {
      padding: 0.5rem 1rem;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1>Todo List</h1>
  
  <div class="form-group">
    <select id="filter">
      <option value="all">All</option>
      <option value="done">Done</option>
      <option value="upcoming">Upcoming</option>
    </select>
  </div>

  <div id="todo-container">
    <div id="todo-list">
      <% todos.forEach(todo => { %>
        <div class="todo-item <%= todo.isDone ? 'todo-done' : '' %>" data-id="<%= todo.id %>">
          <input 
            type="checkbox" 
            <%= todo.isDone ? 'checked' : '' %> 
            onchange="toggleTodo('<%= todo.id %>')"
          >
          <div class="todo-content">
            <h3><%= todo.name %></h3>
            <p><%= todo.description %></p>
            <span class="todo-date"><%= todo.date.toLocaleString() %></span>
          </div>
          <div class="todo-actions">
            <button onclick="editTodo('<%= todo.id %>')">Edit</button>
            <button onclick="deleteTodo('<%= todo.id %>')">Delete</button>
          </div>
        </div>
      <% }) %>
    </div>
  </div>

  <h2 id="form-title">Add Todo</h2>
  <form id="todo-form">
    <input type="hidden" id="todo-id" name="id" value="">
    <div class="form-group">
      <label for="name">Name:</label>
      <input type="text" name="name" id="name" required />
      <small id="name-error" class="error"></small>
    </div>
    <div class="form-group">
      <label for="description">Description:</label>
      <input type="text" name="description" id="description" required />
      <small id="description-error" class="error"></small>
    </div>
    <div class="form-group">
      <label for="date">Date:</label>
      <input type="datetime-local" name="date" id="date" required />
      <small id="date-error" class="error"></small>
    </div>
    <button type="submit" id="submit-btn" >Add Todo</button>
    <button type="button" id="cancel-btn" onclick="resetForm()" style="display: none;">Cancel</button>
  </form>

  <script>
    const form = document.getElementById('todo-form');
    const submitBtn = document.getElementById('submit-btn');
    const cancelBtn = document.getElementById('cancel-btn');
    const formTitle = document.getElementById('form-title');

    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!validateForm()) return;

      const formData = {
        name: document.getElementById('name').value,
        description: document.getElementById('description').value,
        date: document.getElementById('date').value
      };

      const todoId = document.getElementById('todo-id').value;
      const isEdit = todoId !== '';
      
      try {
        const response = await fetch(`/todos${isEdit ? `/${todoId}` : ''}`, {
          method: isEdit ? 'PUT' : 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify(formData)
        });

        if (!response.ok) {
            window.location.reload();
            // console.log('Failed to save todo');
        } 
       
        resetForm();
        window.location.reload();
      } catch (error) {
        console.error('Error saving todo:', error);
        window.location.reload();

        // alert('Failed to save todo');
      }
    });

    function validateForm() {
      const name = document.getElementById('name').value.trim();
      const description = document.getElementById('description').value.trim();
      const date = document.getElementById('date').value;
      
      let isValid = true;
      
      document.querySelectorAll('.error').forEach(el => el.textContent = '');
      
      if (name.length < 3 || name.length > 50) {
        document.getElementById('name-error').textContent = 'Name must be between 3 and 50 characters.';
        isValid = false;
      }
      
      if (description.length < 5 || description.length > 200) {
        document.getElementById('description-error').textContent = 'Description must be between 5 and 200 characters.';
        isValid = false;
      }
      
      if (!date) {
        document.getElementById('date-error').textContent = 'Date is required.';
        isValid = false;
      }
      
      return isValid;
    }

    function resetForm() {
      form.reset();
      document.getElementById('todo-id').value = '';

      submitBtn.textContent = 'Add Todo';
      formTitle.textContent = 'Add Todo';
      cancelBtn.style.display = 'none';

      form.scrollIntoView({ behavior: 'smooth' });
    //   form.reset();
    }

    document.getElementById('filter').addEventListener('change', async function() {
      try {
        const response = await fetch(`/todos?filter=${this.value}`, {
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        });
        // if (!response.ok) throw new Error('Failed to filter todos');
        const html = await response.text();
        document.getElementById('todo-list').innerHTML = html;
      } catch (error) {
        console.error('Error filtering todos:', error);
        window.location.reload();
        // alert('Failed to filter todos');
      }
    });

    async function toggleTodo(id) {
      try {
        const response = await fetch(`/todos/${id}/toggle`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          }
        });
        
        // if (!response.ok) throw new Error('Failed to toggle todo');
        
        window.location.reload();
      } catch (error) {
        console.error('Error toggling todo:', error);
        window.location.reload();

        // alert('Failed to toggle todo status');
      }
    }

    async function deleteTodo(id) {
      if (!confirm('Are you sure you want to delete this todo?')) return;
      
      try {
        const response = await fetch(`/todos/${id}`, {
          method: 'DELETE',
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        });
        
        if (!response.ok) {
          window.location.reload();
          // console.log('Failed to delete todo');
        }
        window.location.reload();
      } catch (error) {
        console.error('Error deleting todo:', error);
        window.location.reload();

        // alert('Failed to delete todo');
      }
    }

    function editTodo(id) {
      const todoItem = document.querySelector(`[data-id="${id}"]`);
      const name = todoItem.querySelector('h3').textContent;
      const description = todoItem.querySelector('p').textContent;
      const dateText = todoItem.querySelector('.todo-date').textContent;
      
      const date = new Date(dateText);
      const dateString = new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
        .toISOString()
        .slice(0, 16);

      document.getElementById('todo-id').value = id;
      document.getElementById('name').value = name;
      document.getElementById('description').value = description;
      document.getElementById('date').value = dateString;
      
      submitBtn.textContent = 'Update Todo';
      formTitle.textContent = 'Edit Todo';
      cancelBtn.style.display = 'inline-block';
      
      form.scrollIntoView({ behavior: 'smooth' });

    }
  </script>
</body>
</html>